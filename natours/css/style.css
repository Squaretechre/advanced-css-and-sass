/*
    COLORS:

    Light green: #7ed56f
    Medium green: #55c57a
    Dark green: #28b485
*/

/*
    Normalize.css not really neccessary anymore for cross browser reset.
    Prefer simple reset using universal selector.
*/

/*
    Remove default margin and padding applied by browsers.
*/
* {
    margin: 0;
    padding: 0;

    /* Change box model so border and padding no longer added to total width/height for a box. */
    box-sizing: border-box;
}

body {
    /* 
        Set font related properties in body as they are usually inherited.
        Font properties will be inherited by all child elements of the body.
        Better practice than putting these properties in the universal selector. 
    */
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    
    /* Line height is 1.7x bigger than predefined line height without. */
    line-height: 1.7;
    color: #777;

    /* Padding is not inherited. */
    padding: 30px;
}

.header {
    /* 95% of viewport height. */
    height: 95vh;

    /*
        Always use background-image property to specify gradients.
        Want gradient to stay on top so must be first image specified.
        Create effect by layering background images.
        Can also specify a direction with linear-gradient.
    */
    background-image: linear-gradient(
        to right bottom, 
        rgba(126, 213, 111, 0.8), 
        rgba(40, 180, 131, 0.8)),
        url(../img/hero.jpg
    );
    background-size: cover;

    /*
        Ensure top of image stays at the top of the container. 
        Bottom of the image will crop but top stays the same.
            - bottom
            - center
    */
    background-position: top;

    /*
        Specify a polygon through which the image will still be visible.
        The polygon function takes coordinates (X, Y) or path to clip.
    */
    clip-path: polygon(0 0, 100% 0, 100% 80%, 0 100%);
    position: relative;
}

.logo-box {
    /* Absolute positioned elements will be positioned relative to their parent element with position set to relative. */
    position: absolute;    
    top: 40px;
    left: 40px;
}

.logo {
    /* Width will scale according to height. */
    height: 35px;    
}

.text-box {
    /* Absolute position relative to .header */
    position: absolute;
    top: 40%;
    left: 50%;

    /* Translate is in relation to the element, not header, the parent */
    transform: translate(-50%, -50%);
    text-align: center;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;

    /*
        Fix for shake at end of an animation.
        Determine if back part of an element is visible or hidden when transformed.
    */
    backface-visibility: hidden;
    margin-bottom: 60px;
}

.heading-primary-main {
    /* 
        Block elements occupy full width they have available.
        Block elements create line breaks after and before them.
    */
    display: block; 
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;

    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;

    /* 
        Delay an animations start time with:
        animation-delay: 3s;

        Set number of iterations with:
        animation-iteration-count: 3;

        Set how an animation should progress over the duration of each cycle:
        animation-timing-function: ease-out;

        Important timing functions:
        ease-out:   start fast then go slow
        ease-in:    start slow then go fast
    */
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.4px;

    /* Animation shorthand. */
    animation: moveInRight 1s ease-out;
}

/*
    For browser performance only animate a maximum of 2 properties.
    Browsers are optimized for opacity and transform.
*/
@keyframes moveInLeft {
    /* Before animation starts, initial state - start. */
    0% {
        opacity: 0; 
        transform: translateX(-100px)
    }

    /* Header will animate 20px further than its initial position on the X axis. */
    80% {
        transform: translateX(10px)
    }

    /* Finish. */
    100% {
        opacity: 1;         

        /*
            Use translate(0) to render element how it'd normally look.
            In this case the header snaps back from the 10px offset at 80%.
        */
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0; 
        transform: translateX(100px)
    }

    80% {
        transform: translateX(-10px)
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

/*
    Pseudo classes are special states of a selector.
    They're used to style elements under a special condition.
    :link is a state of the btn selector.
*/
.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;

    /* Padding shorthand, top & bottom, left & right. */
    /* Padding long form, top, right, bottom, left. */
    padding: 15px 40px;

    /* Need a block element for padding, height, width. */
    /* 
        inline-block elements treated as if they are text.
        To center, set parent elements text-align property to center.
    */
    display: inline-block;
    border-radius: 100px;

    /*
        Shorthand version of transition.
        The transition property have to be on the initial state.
        :hover and :active state transforms will be animated in relation to the element's initial state.
    */
    transition: all .2s;
}

.btn:hover {
    transform: translateY(-3px);

    /* X, Y, blur, color. */
    box-shadow: 0 10px 20px rgba(0,0,0,.2);
}

/* When clicked. */
.btn:active {
    transform: translateY(-1px);

    /*
        X, Y, blur, color.
        Reduce the shadow and blur to give the effect of being closer to the page.
    */
    box-shadow: 0 5px 10px rgba(0,0,0,.2);
}

.btn-white {
   background-color: #fff; 
   color: #777;
}